import pickle, os
import numpy as np
import sys
import skimage as ski
from pathlib import Path
from PIL import Image
from matplotlib import pyplot as plt
import geopandas as gpd
import background_generation as backgen


from General_Functions import functions

# Linux root directory
root_dir = f"/home/adriano/projeto_mestrado/modules"
sys.path.insert(0, "/home/adriano/projeto_mestrado/modules/Slice_mapper")

# Windows root directory
#root_dir = Path(r"C:\Users\adria\Documents\Mestrado\texture_codes\modules")
#sys.path.insert(0, r"C:\Users\adria\Documents\Mestrado\texture_codes\modules")

img_dir = f'{root_dir}/Images/vessel_data/images'

image_name = 'Experiment #1 (adults set #1)_20x_batch1 - Superfical layers@40-Image 3-20X'

background_path = 'T-3 Weeks@Females@919 F@919-CTL-top-20X-01'

# Reading the pickle file and generating the vessel_map
index = 1
pickle_dir = f'{root_dir}/Vessel_Models_pickle'
path = (pickle_dir + f'/{image_name}_savedata1.pickle')
file = pickle.load(open(path, 'rb'))
vessel_map = file['vessel_model'].vessel_map
original_map = vessel_map.mapped_values

rows, cols = original_map.shape[0], original_map.shape[1]

height = (rows / 2)

file_path = f'{root_dir}/Artificial_Lines/tracados_bezier_maiores/img_savedata_13.json'

background_path = f'{root_dir}/Background/Mapas_gerados_artificialmente/{background_path}.tiff'
background = np.array(Image.open(f'{background_path}'))

medial_path = backgen.return_paths(file_path)

map_expanded_original = backgen.expand_maps_to_trace_size(original_map, medial_path[1])

binary_original_image = vessel_map.mapped_mask_values
binary_image_without_side_artifacts = backgen.returns_binary_image_without_artifacts(vessel_map, binary_original_image)

binary_image_without_artifacts = backgen.fill_holes(binary_image_without_side_artifacts)

normalized_original_map = backgen.normalize(background, original_map, binary_image_without_artifacts, threshold=40)

distance = int(medial_path[1])

expanded_binary_vessel_map = backgen.expand_maps_to_trace_size(binary_image_without_artifacts, distance)

left_offset, central_line, right_offset, max_size = backgen.returns_lines_offset_position_size(medial_path[0], height)

# Creating lines to the right, center, and left from the path generated by Bezier curves
dst_array_np = backgen.returns_dst_array_np(left_offset, central_line, right_offset, max_size)

# Executing the algorithm that transforms the expanded map
img_proper, img_out, new_src, new_dst, tform_out, translation, new_origin = backgen.rotate_expanded_map(
    map_expanded_original, dst_array_np, max_size)

tri = tform_out._tesselation
tri_inv = tform_out._inverse_tesselation

plt.figure(figsize=[100, 80])
ax = plt.subplot(121)
plt.imshow(img_proper, 'gray')
x, y = tri.points.T
ax.plot(x, y, 'o')
ax.triplot(x, y, tri.simplices.copy())

ax = plt.subplot(122)
plt.imshow(img_out, 'gray')
x, y = tri_inv.points.T
ax.plot(x, y, 'o')
ax.triplot(x, y, tri_inv.simplices.copy())

plt.savefig('delaunay.svg', format='svg')
